import l,{createContext,useState,useEffect,useContext}from'react';var a=createContext(null),C=({translations:r,locale:t,reloadKey:n,children:e})=>{let[s,o]=useState(t),[i,c]=useState(n);useEffect(()=>{n!==void 0&&n!==i&&(o(t),c(n));},[n,i,t]),useEffect(()=>{t!==s&&n===void 0&&o(t);},[t,s,n]);let p=f=>{o(f);};return l.createElement(a.Provider,{value:{translations:r,language:s,changeLanguage:p}},e)};var T=(r,t)=>t.split(".").reduce((n,e)=>n?.[e],r),P=(r,t={})=>typeof r!="string"?r:r.replace(/\{([^}]+)\}/g,(n,e)=>t.hasOwnProperty(e)?String(t[e]):n).replace(/\\\{([^}]+)\\\}/g,(n,e)=>`{${e}}`),w=()=>{let r=useContext(a);if(!r)throw new Error("useTranslations must be used within a TranslationsProvider");let{translations:t,language:n}=r;return {t:(e,s)=>{let o=T(t?.[n],e);return o?s&&Object.keys(s).length>0?P(o,s):o:e},changeLanguage:r.changeLanguage}};export{a as TranslationsContext,C as TranslationsProvider,T as getNestedTranslation,P as interpolateVariables,w as useTranslation};//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map