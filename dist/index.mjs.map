{"version":3,"sources":["../src/TranslationsProvider.tsx","../src/useTranslation.ts"],"names":["TranslationsContext","createContext","TranslationsProvider","translations","locale","children","language","setLanguage","useState","changeLanguage","lang","React","getNestedTranslation","obj","path","acc","key","useTranslation","context","useContext"],"mappings":"wDAUaA,IAAAA,CAAAA,CACTC,aAA+C,CAAA,IAAI,CAQ1CC,CAAAA,CAAAA,CAA4D,CAAC,CACtE,YAAA,CAAAC,CACA,CAAA,MAAA,CAAAC,CACA,CAAA,QAAA,CAAAC,CACJ,CAAA,GAAM,CACF,GAAM,CAACC,CAAAA,CAAUC,CAAW,CAAA,CAAIC,SAASJ,CAAM,CAAA,CAEzCK,CAAkBC,CAAAA,CAAAA,EAAiB,CACrCH,CAAAA,CAAYG,CAAI,EACpB,CAEA,CAAA,OACIC,CAAA,CAAA,aAAA,CAACX,CAAoB,CAAA,QAAA,CAApB,CACG,KAAO,CAAA,CAAE,YAAAG,CAAAA,CAAAA,CAAc,QAAAG,CAAAA,CAAAA,CAAU,cAAAG,CAAAA,CAAe,CAC/CJ,CAAAA,CAAAA,CACL,CAER,ECjCO,IAAMO,CAAuB,CAAA,CAACC,CAAUC,CAAAA,CAAAA,GACpCA,CAAK,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,MAAO,CAAA,CAACC,CAAKC,CAAAA,CAAAA,GAAQD,IAAMC,CAAG,CAAA,CAAGH,CAAG,CAAA,CAGlDI,CAAiB,CAAA,IAAM,CAChC,IAAMC,CAAUC,CAAAA,UAAAA,CAAWnB,CAAmB,CAAA,CAC9C,GAAI,CAACkB,EACD,MAAM,IAAI,KACN,CAAA,4DACJ,CAEJ,CAAA,GAAM,CAAE,YAAA,CAAAf,CAAc,CAAA,QAAA,CAAAG,CAAS,CAAA,CAAIY,CAEnC,CAAA,OAAO,CACH,CAAIF,CAAAA,CAAAA,EACoBJ,CAChBT,CAAAA,CAAAA,GAAeG,CAAQ,CAAA,CACvBU,CACJ,CAAA,EACsBA,CAE1B,CAAA,cAAA,CAAgBE,CAAQ,CAAA,cAC5B,CACJ","file":"index.mjs","sourcesContent":["'use client';\n\nimport React, { createContext, ReactNode, useState } from 'react';\n\nexport interface TranslationsContextProps {\n    translations: any;\n    language: string;\n    changeLanguage: (lang: string) => void;\n}\n\nexport const TranslationsContext =\n    createContext<TranslationsContextProps | null>(null);\n\nexport interface TranslationsProviderProps {\n    translations: any;\n    locale: string;\n    children: ReactNode;\n}\n\nexport const TranslationsProvider: React.FC<TranslationsProviderProps> = ({\n    translations,\n    locale,\n    children\n}) => {\n    const [language, setLanguage] = useState(locale);\n\n    const changeLanguage = (lang: string) => {\n        setLanguage(lang);\n    };\n\n    return (\n        <TranslationsContext.Provider\n            value={{ translations, language, changeLanguage }}>\n            {children}\n        </TranslationsContext.Provider>\n    );\n};\n","import { useContext } from 'react';\nimport { TranslationsContext } from './TranslationsProvider';\n\nexport const getNestedTranslation = (obj: any, path: string) => {\n    return path.split('.').reduce((acc, key) => acc?.[key], obj);\n};\n\nexport const useTranslation = () => {\n    const context = useContext(TranslationsContext);\n    if (!context) {\n        throw new Error(\n            'useTranslations must be used within a TranslationsProvider'\n        );\n    }\n    const { translations, language } = context;\n\n    return {\n        t: (key: string) => {\n            const translation = getNestedTranslation(\n                translations?.[language],\n                key\n            );\n            return translation || key;\n        },\n        changeLanguage: context.changeLanguage\n    };\n};"]}