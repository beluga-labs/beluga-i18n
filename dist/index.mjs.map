{"version":3,"sources":["../src/TranslationsProvider.tsx","../src/useTranslation.ts"],"names":["TranslationsContext","createContext","TranslationsProvider","translations","locale","reloadKey","children","language","setLanguage","useState","lastReloadKey","setLastReloadKey","useEffect","changeLanguage","lang","React","getNestedTranslation","obj","path","acc","key","interpolateVariables","text","variables","match","variableName","useTranslation","context","useContext","translation"],"mappings":"kEAUO,IAAMA,CAAAA,CACTC,aAAAA,CAA+C,IAAI,EAS1CC,CAAAA,CAA4D,CAAC,CACtE,YAAA,CAAAC,CAAAA,CACA,MAAA,CAAAC,EACA,SAAA,CAAAC,CAAAA,CACA,QAAA,CAAAC,CACJ,CAAA,GAAM,CACF,GAAM,CAACC,CAAAA,CAAUC,CAAW,CAAA,CAAIC,QAAAA,CAASL,CAAM,EACzC,CAACM,CAAAA,CAAeC,CAAgB,CAAA,CAAIF,QAAAA,CAASJ,CAAS,EAE5DO,SAAAA,CAAU,IAAM,CACRP,CAAAA,GAAc,MAAA,EAAaA,CAAAA,GAAcK,IACzCF,CAAAA,CAAYJ,CAAM,CAAA,CAClBO,CAAAA,CAAiBN,CAAS,CAAA,EAElC,EAAG,CAACA,CAAAA,CAAWK,CAAAA,CAAeN,CAAM,CAAC,CAAA,CAErCQ,UAAU,IAAM,CACRR,CAAAA,GAAWG,CAAAA,EAAYF,CAAAA,GAAc,MAAA,EACrCG,EAAYJ,CAAM,EAE1B,CAAA,CAAG,CAACA,CAAAA,CAAQG,CAAAA,CAAUF,CAAS,CAAC,CAAA,CAEhC,IAAMQ,CAAAA,CAAkBC,CAAAA,EAAiB,CACrCN,EAAYM,CAAI,EACpB,CAAA,CAEA,OACIC,CAAAA,CAAA,aAAA,CAACf,EAAoB,QAAA,CAApB,CACG,KAAA,CAAO,CAAE,YAAA,CAAAG,CAAAA,CAAc,SAAAI,CAAAA,CAAU,cAAA,CAAAM,CAAe,CAAA,CAAA,CAC/CP,CACL,CAER,ECjDO,IAAMU,CAAAA,CAAuB,CAACC,CAAAA,CAAUC,CAAAA,GACpCA,CAAAA,CAAK,KAAA,CAAM,GAAG,CAAA,CAAE,OAAO,CAACC,CAAAA,CAAKC,CAAAA,GAAQD,CAAAA,GAAMC,CAAG,CAAA,CAAGH,CAAG,CAAA,CAGlDI,CAAAA,CAAuB,CAChCC,CAAAA,CACAC,CAAAA,CAAiC,KAE7B,OAAOD,CAAAA,EAAS,QAAA,CACTA,CAAAA,CAGJA,CAAAA,CACF,OAAA,CAAQ,eAAgB,CAACE,CAAAA,CAAOC,CAAAA,GACzBF,CAAAA,CAAU,cAAA,CAAeE,CAAY,EAC9B,MAAA,CAAOF,CAAAA,CAAUE,CAAY,CAAC,CAAA,CAElCD,CACV,EACA,OAAA,CAAQ,kBAAA,CAAoB,CAACA,CAAAA,CAAOC,CAAAA,GAC1B,CAAA,CAAA,EAAIA,CAAY,CAAA,CAAA,CAC1B,CAAA,CAGIC,CAAAA,CAAiB,IAAM,CAChC,IAAMC,EAAUC,UAAAA,CAAW5B,CAAmB,CAAA,CAC9C,GAAI,CAAC2B,CAAAA,CACD,MAAM,IAAI,KAAA,CACN,4DACJ,CAAA,CAEJ,GAAM,CAAE,aAAAxB,CAAAA,CAAc,QAAA,CAAAI,CAAS,CAAA,CAAIoB,CAAAA,CAEnC,OAAO,CACH,CAAA,CAAG,CAACP,CAAAA,CAAaG,CAAAA,GAAoC,CACjD,IAAMM,EAAcb,CAAAA,CAChBb,CAAAA,GAAeI,CAAQ,CAAA,CACvBa,CACJ,CAAA,CAEA,OAAKS,CAAAA,CAIDN,CAAAA,EAAa,MAAA,CAAO,IAAA,CAAKA,CAAS,CAAA,CAAE,OAAS,CAAA,CACtCF,CAAAA,CAAqBQ,CAAAA,CAAaN,CAAS,CAAA,CAG/CM,CAAAA,CAPIT,CAQf,CAAA,CACA,cAAA,CAAgBO,CAAAA,CAAQ,cAC5B,CACJ","file":"index.mjs","sourcesContent":["'use client';\n\nimport React, { createContext, ReactNode, useEffect, useState } from 'react';\n\nexport interface TranslationsContextProps {\n    translations: any;\n    language: string;\n    changeLanguage: (lang: string) => void;\n}\n\nexport const TranslationsContext =\n    createContext<TranslationsContextProps | null>(null);\n\nexport interface TranslationsProviderProps {\n    translations: any;\n    locale: string;\n    reloadKey?: string | number;\n    children: ReactNode;\n}\n\nexport const TranslationsProvider: React.FC<TranslationsProviderProps> = ({\n    translations,\n    locale,\n    reloadKey,\n    children\n}) => {\n    const [language, setLanguage] = useState(locale);\n    const [lastReloadKey, setLastReloadKey] = useState(reloadKey);\n\n    useEffect(() => {\n        if (reloadKey !== undefined && reloadKey !== lastReloadKey) {\n            setLanguage(locale);\n            setLastReloadKey(reloadKey);\n        }\n    }, [reloadKey, lastReloadKey, locale]);\n\n    useEffect(() => {\n        if (locale !== language && reloadKey === undefined) {\n            setLanguage(locale);\n        }\n    }, [locale, language, reloadKey]);\n\n    const changeLanguage = (lang: string) => {\n        setLanguage(lang);\n    };\n\n    return (\n        <TranslationsContext.Provider\n            value={{ translations, language, changeLanguage }}>\n            {children}\n        </TranslationsContext.Provider>\n    );\n};\n","import { useContext } from 'react';\nimport { TranslationsContext } from './TranslationsProvider';\n\nexport const getNestedTranslation = (obj: any, path: string) => {\n    return path.split('.').reduce((acc, key) => acc?.[key], obj);\n};\n\nexport const interpolateVariables = (\n    text: string,\n    variables: Record<string, any> = {}\n) => {\n    if (typeof text !== 'string') {\n        return text;\n    }\n\n    return text\n        .replace(/\\{([^}]+)\\}/g, (match, variableName) => {\n            if (variables.hasOwnProperty(variableName)) {\n                return String(variables[variableName]);\n            }\n            return match;\n        })\n        .replace(/\\\\\\{([^}]+)\\\\\\}/g, (match, variableName) => {\n            return `{${variableName}}`;\n        });\n};\n\nexport const useTranslation = () => {\n    const context = useContext(TranslationsContext);\n    if (!context) {\n        throw new Error(\n            'useTranslations must be used within a TranslationsProvider'\n        );\n    }\n    const { translations, language } = context;\n\n    return {\n        t: (key: string, variables?: Record<string, any>) => {\n            const translation = getNestedTranslation(\n                translations?.[language],\n                key\n            );\n\n            if (!translation) {\n                return key;\n            }\n\n            if (variables && Object.keys(variables).length > 0) {\n                return interpolateVariables(translation, variables);\n            }\n\n            return translation;\n        },\n        changeLanguage: context.changeLanguage\n    };\n};\n"]}