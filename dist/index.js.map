{"version":3,"sources":["../src/TranslationsProvider.tsx","../src/useTranslation.ts"],"names":["TranslationsContext","createContext","TranslationsProvider","translations","locale","reloadKey","children","language","setLanguage","useState","lastReloadKey","setLastReloadKey","useEffect","changeLanguage","lang","React","getNestedTranslation","obj","path","acc","key","interpolateVariables","text","variables","parseHtml","processedText","match","variableName","parse","useTranslation","context","useContext","translation"],"mappings":"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","file":"index.js","sourcesContent":["'use client';\n\nimport React, { createContext, ReactNode, useEffect, useState } from 'react';\n\nexport interface TranslationsContextProps {\n    translations: any;\n    language: string;\n    changeLanguage: (lang: string) => void;\n}\n\nexport const TranslationsContext =\n    createContext<TranslationsContextProps | null>(null);\n\nexport interface TranslationsProviderProps {\n    translations: any;\n    locale: string;\n    reloadKey?: string | number;\n    children: ReactNode;\n}\n\nexport const TranslationsProvider: React.FC<TranslationsProviderProps> = ({\n    translations,\n    locale,\n    reloadKey,\n    children\n}) => {\n    const [language, setLanguage] = useState(locale);\n    const [lastReloadKey, setLastReloadKey] = useState(reloadKey);\n\n    useEffect(() => {\n        if (reloadKey !== undefined && reloadKey !== lastReloadKey) {\n            setLanguage(locale);\n            setLastReloadKey(reloadKey);\n        }\n    }, [reloadKey, lastReloadKey, locale]);\n\n    useEffect(() => {\n        if (locale !== language && reloadKey === undefined) {\n            setLanguage(locale);\n        }\n    }, [locale, language, reloadKey]);\n\n    const changeLanguage = (lang: string) => {\n        setLanguage(lang);\n    };\n\n    return (\n        <TranslationsContext.Provider\n            value={{ translations, language, changeLanguage }}>\n            {children}\n        </TranslationsContext.Provider>\n    );\n};\n","import { useContext } from 'react';\nimport parse from 'html-react-parser';\nimport { TranslationsContext } from './TranslationsProvider';\n\nexport const getNestedTranslation = (obj: any, path: string) => {\n    return path.split('.').reduce((acc, key) => acc?.[key], obj);\n};\n\nexport const interpolateVariables = (\n    text: string,\n    variables: Record<string, any> = {},\n    parseHtml: boolean = true\n) => {\n    if (typeof text !== 'string') {\n        return text;\n    }\n\n    let processedText = text\n        .replace(/\\{([^}]+)\\}/g, (match, variableName) => {\n            if (variables.hasOwnProperty(variableName)) {\n                return String(variables[variableName]);\n            }\n            return match;\n        })\n        .replace(/\\\\\\{([^}]+)\\\\\\}/g, (match, variableName) => {\n            return `{${variableName}}`;\n        });\n\n    // Parse HTML if requested\n    if (parseHtml && processedText.includes('<')) {\n        return parse(processedText);\n    }\n\n    return processedText;\n};\n\nexport const useTranslation = () => {\n    const context = useContext(TranslationsContext);\n    if (!context) {\n        throw new Error(\n            'useTranslations must be used within a TranslationsProvider'\n        );\n    }\n    const { translations, language } = context;\n\n    return {\n        t: (key: string, variables?: Record<string, any>, parseHtml: boolean = true) => {\n            const translation = getNestedTranslation(\n                translations?.[language],\n                key\n            );\n\n            if (!translation) {\n                return key;\n            }\n\n            if (variables && Object.keys(variables).length > 0) {\n                return interpolateVariables(translation, variables, parseHtml);\n            }\n\n            if (parseHtml) {\n                return interpolateVariables(translation, {}, parseHtml);\n            }\n\n            return translation;\n        },\n        changeLanguage: context.changeLanguage\n    };\n};\n"]}