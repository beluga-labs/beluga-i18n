{"version":3,"sources":["../src/TranslationsProvider.tsx","../src/useTranslation.ts"],"names":["TranslationsContext","createContext","TranslationsProvider","translations","locale","children","language","setLanguage","useState","changeLanguage","lang","React","getNestedTranslation","obj","path","acc","key","interpolateVariables","text","variables","match","variableName","useTranslation","context","useContext","translation"],"mappings":"oJAUO,IAAMA,CAAAA,CACTC,eAAAA,CAA+C,IAAI,EAQ1CC,CAAAA,CAA4D,CAAC,CACtE,YAAA,CAAAC,CAAAA,CACA,OAAAC,CAAAA,CACA,QAAA,CAAAC,CACJ,CAAA,GAAM,CACF,GAAM,CAACC,EAAUC,CAAW,CAAA,CAAIC,WAASJ,CAAM,CAAA,CAEzCK,CAAAA,CAAkBC,CAAAA,EAAiB,CACrCH,CAAAA,CAAYG,CAAI,EACpB,CAAA,CAEA,OACIC,mBAAA,aAAA,CAACX,CAAAA,CAAoB,QAAA,CAApB,CACG,MAAO,CAAE,YAAA,CAAAG,EAAc,QAAA,CAAAG,CAAAA,CAAU,eAAAG,CAAe,CAAA,CAAA,CAC/CJ,CACL,CAER,ECjCO,IAAMO,EAAuB,CAACC,CAAAA,CAAUC,CAAAA,GACpCA,CAAAA,CAAK,MAAM,GAAG,CAAA,CAAE,OAAO,CAACC,CAAAA,CAAKC,IAAQD,CAAAA,GAAMC,CAAG,CAAA,CAAGH,CAAG,EAIlDI,CAAAA,CAAuB,CAACC,EAAcC,CAAAA,CAAiC,KAC5E,OAAOD,CAAAA,EAAS,QAAA,CACTA,CAAAA,CAGJA,EAAK,OAAA,CAAQ,cAAA,CAAgB,CAACE,CAAAA,CAAOC,CAAAA,GAEpCF,EAAU,cAAA,CAAeE,CAAY,CAAA,CAC9B,MAAA,CAAOF,EAAUE,CAAY,CAAC,EAGlCD,CACV,CAAA,CAAE,QAAQ,kBAAA,CAAoB,CAACA,CAAAA,CAAOC,CAAAA,GAE5B,IAAIA,CAAY,CAAA,CAAA,CAC1B,EAGQC,CAAAA,CAAiB,IAAM,CAChC,IAAMC,CAAAA,CAAUC,YAAAA,CAAWxB,CAAmB,EAC9C,GAAI,CAACuB,EACD,MAAM,IAAI,MACN,4DACJ,CAAA,CAEJ,GAAM,CAAE,aAAApB,CAAAA,CAAc,QAAA,CAAAG,CAAS,CAAA,CAAIiB,CAAAA,CAEnC,OAAO,CACH,CAAA,CAAG,CAACP,CAAAA,CAAaG,IAAoC,CACjD,IAAMM,EAAcb,CAAAA,CAChBT,CAAAA,GAAeG,CAAQ,CAAA,CACvBU,CACJ,CAAA,CAEA,OAAKS,EAKDN,CAAAA,EAAa,MAAA,CAAO,KAAKA,CAAS,CAAA,CAAE,OAAS,CAAA,CACtCF,CAAAA,CAAqBQ,CAAAA,CAAaN,CAAS,EAG/CM,CAAAA,CARIT,CASf,EACA,cAAA,CAAgBO,CAAAA,CAAQ,cAC5B,CACJ","file":"index.js","sourcesContent":["'use client';\n\nimport React, { createContext, ReactNode, useState } from 'react';\n\nexport interface TranslationsContextProps {\n    translations: any;\n    language: string;\n    changeLanguage: (lang: string) => void;\n}\n\nexport const TranslationsContext =\n    createContext<TranslationsContextProps | null>(null);\n\nexport interface TranslationsProviderProps {\n    translations: any;\n    locale: string;\n    children: ReactNode;\n}\n\nexport const TranslationsProvider: React.FC<TranslationsProviderProps> = ({\n    translations,\n    locale,\n    children\n}) => {\n    const [language, setLanguage] = useState(locale);\n\n    const changeLanguage = (lang: string) => {\n        setLanguage(lang);\n    };\n\n    return (\n        <TranslationsContext.Provider\n            value={{ translations, language, changeLanguage }}>\n            {children}\n        </TranslationsContext.Provider>\n    );\n};\n","import { useContext } from 'react';\nimport { TranslationsContext } from './TranslationsProvider';\n\nexport const getNestedTranslation = (obj: any, path: string) => {\n    return path.split('.').reduce((acc, key) => acc?.[key], obj);\n};\n\n// Variable interpolation function\nexport const interpolateVariables = (text: string, variables: Record<string, any> = {}) => {\n    if (typeof text !== 'string') {\n        return text;\n    }\n\n    return text.replace(/\\{([^}]+)\\}/g, (match, variableName) => {\n        // Check if variable exists in the provided variables\n        if (variables.hasOwnProperty(variableName)) {\n            return String(variables[variableName]);\n        }\n        // If variable not found, return the original match\n        return match;\n    }).replace(/\\\\\\{([^}]+)\\\\\\}/g, (match, variableName) => {\n        // Unescape escaped variables\n        return `{${variableName}}`;\n    });\n};\n\nexport const useTranslation = () => {\n    const context = useContext(TranslationsContext);\n    if (!context) {\n        throw new Error(\n            'useTranslations must be used within a TranslationsProvider'\n        );\n    }\n    const { translations, language } = context;\n\n    return {\n        t: (key: string, variables?: Record<string, any>) => {\n            const translation = getNestedTranslation(\n                translations?.[language],\n                key\n            );\n\n            if (!translation) {\n                return key;\n            }\n\n            // Interpolate variables if provided\n            if (variables && Object.keys(variables).length > 0) {\n                return interpolateVariables(translation, variables);\n            }\n\n            return translation;\n        },\n        changeLanguage: context.changeLanguage\n    };\n};"]}